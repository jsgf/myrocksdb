#![allow(dead_code, non_upper_case_globals, non_camel_case_types)]
/* automatically generated by rust-bindgen */
use libc::{size_t, uint64_t, int64_t, uint32_t, int32_t, c_void, c_int, c_uint, c_char, c_uchar, c_double};

pub enum Struct_rocksdb_t { }
pub type rocksdb_t = Struct_rocksdb_t;
pub enum Struct_rocksdb_backup_engine_t { }
pub type rocksdb_backup_engine_t = Struct_rocksdb_backup_engine_t;
pub enum Struct_rocksdb_backup_engine_info_t { }
pub type rocksdb_backup_engine_info_t = Struct_rocksdb_backup_engine_info_t;
pub enum Struct_rocksdb_restore_options_t { }
pub type rocksdb_restore_options_t = Struct_rocksdb_restore_options_t;
pub enum Struct_rocksdb_cache_t { }
pub type rocksdb_cache_t = Struct_rocksdb_cache_t;
pub enum Struct_rocksdb_compactionfilter_t { }
pub type rocksdb_compactionfilter_t = Struct_rocksdb_compactionfilter_t;
pub enum Struct_rocksdb_compactionfiltercontext_t { }
pub type rocksdb_compactionfiltercontext_t = Struct_rocksdb_compactionfiltercontext_t;
pub enum Struct_rocksdb_compactionfilterfactory_t { }
pub type rocksdb_compactionfilterfactory_t = Struct_rocksdb_compactionfilterfactory_t;
pub enum Struct_rocksdb_comparator_t { }
pub type rocksdb_comparator_t = Struct_rocksdb_comparator_t;
pub enum Struct_rocksdb_env_t { }
pub type rocksdb_env_t = Struct_rocksdb_env_t;
pub enum Struct_rocksdb_fifo_compaction_options_t { }
pub type rocksdb_fifo_compaction_options_t = Struct_rocksdb_fifo_compaction_options_t;
pub enum Struct_rocksdb_filelock_t { }
pub type rocksdb_filelock_t = Struct_rocksdb_filelock_t;
pub enum Struct_rocksdb_filterpolicy_t { }
pub type rocksdb_filterpolicy_t = Struct_rocksdb_filterpolicy_t;
pub enum Struct_rocksdb_flushoptions_t { }
pub type rocksdb_flushoptions_t = Struct_rocksdb_flushoptions_t;
pub enum Struct_rocksdb_iterator_t { }
pub type rocksdb_iterator_t = Struct_rocksdb_iterator_t;
pub enum Struct_rocksdb_logger_t { }
pub type rocksdb_logger_t = Struct_rocksdb_logger_t;
pub enum Struct_rocksdb_mergeoperator_t { }
pub type rocksdb_mergeoperator_t = Struct_rocksdb_mergeoperator_t;
pub enum Struct_rocksdb_options_t { }
pub type rocksdb_options_t = Struct_rocksdb_options_t;
pub enum Struct_rocksdb_block_based_table_options_t { }
pub type rocksdb_block_based_table_options_t = Struct_rocksdb_block_based_table_options_t;
pub enum Struct_rocksdb_cuckoo_table_options_t { }
pub type rocksdb_cuckoo_table_options_t = Struct_rocksdb_cuckoo_table_options_t;
pub enum Struct_rocksdb_randomfile_t { }
pub type rocksdb_randomfile_t = Struct_rocksdb_randomfile_t;
pub enum Struct_rocksdb_readoptions_t { }
pub type rocksdb_readoptions_t = Struct_rocksdb_readoptions_t;
pub enum Struct_rocksdb_seqfile_t { }
pub type rocksdb_seqfile_t = Struct_rocksdb_seqfile_t;
pub enum Struct_rocksdb_slicetransform_t { }
pub type rocksdb_slicetransform_t = Struct_rocksdb_slicetransform_t;
pub enum Struct_rocksdb_snapshot_t { }
pub type rocksdb_snapshot_t = Struct_rocksdb_snapshot_t;
pub enum Struct_rocksdb_writablefile_t { }
pub type rocksdb_writablefile_t = Struct_rocksdb_writablefile_t;
pub enum Struct_rocksdb_writebatch_t { }
pub type rocksdb_writebatch_t = Struct_rocksdb_writebatch_t;
pub enum Struct_rocksdb_writeoptions_t { }
pub type rocksdb_writeoptions_t = Struct_rocksdb_writeoptions_t;
pub enum Struct_rocksdb_universal_compaction_options_t { }
pub type rocksdb_universal_compaction_options_t = Struct_rocksdb_universal_compaction_options_t;
pub enum Struct_rocksdb_livefiles_t { }
pub type rocksdb_livefiles_t = Struct_rocksdb_livefiles_t;
pub enum Struct_rocksdb_column_family_handle_t { }
pub type rocksdb_column_family_handle_t = Struct_rocksdb_column_family_handle_t;

pub const rocksdb_block_based_table_index_type_binary_search: c_uint = 0;
pub const rocksdb_block_based_table_index_type_hash_search: c_uint = 1;

pub const rocksdb_no_compression: c_uint = 0;
pub const rocksdb_snappy_compression: c_uint = 1;
pub const rocksdb_zlib_compression: c_uint = 2;
pub const rocksdb_bz2_compression: c_uint = 3;
pub const rocksdb_lz4_compression: c_uint = 4;
pub const rocksdb_lz4hc_compression: c_uint = 5;

pub const rocksdb_level_compaction: c_uint = 0;
pub const rocksdb_universal_compaction: c_uint = 1;
pub const rocksdb_fifo_compaction: c_uint = 2;

pub const rocksdb_similar_size_compaction_stop_style: c_uint = 0;
pub const rocksdb_total_size_compaction_stop_style: c_uint = 1;

#[link(name = "rocksdb", kind = "static")]
extern "C" {
    pub fn rocksdb_open(options: *const rocksdb_options_t,
                        name: *const c_char,
                        errptr: *mut *mut c_char) -> *mut rocksdb_t;
    pub fn rocksdb_open_for_read_only(options: *const rocksdb_options_t,
                                      name: *const c_char,
                                      error_if_log_file_exist: c_uchar,
                                      errptr: *mut *mut c_char) -> *mut rocksdb_t;
    pub fn rocksdb_backup_engine_open(options: *const rocksdb_options_t,
                                      path: *const c_char,
                                      errptr: *mut *mut c_char) -> *mut rocksdb_backup_engine_t;
    pub fn rocksdb_backup_engine_create_new_backup(be: *mut rocksdb_backup_engine_t,
                                                   db: *mut rocksdb_t,
                                                   errptr: *mut *mut c_char);
    pub fn rocksdb_restore_options_create() -> *mut rocksdb_restore_options_t;
    pub fn rocksdb_restore_options_destroy(opt: *mut rocksdb_restore_options_t);
    pub fn rocksdb_restore_options_set_keep_log_files(opt: *mut rocksdb_restore_options_t,
                                                      v: c_int);
    pub fn rocksdb_backup_engine_restore_db_from_latest_backup(be: *mut rocksdb_backup_engine_t,
                                                               db_dir: *const c_char,
                                                               wal_dir: *const c_char,
                                                               restore_options: *const rocksdb_restore_options_t,
                                                               errptr: *mut *mut c_char);
    pub fn rocksdb_backup_engine_get_backup_info(be: *mut rocksdb_backup_engine_t) -> *const rocksdb_backup_engine_info_t;
    pub fn rocksdb_backup_engine_info_count(info: *const rocksdb_backup_engine_info_t) -> c_int;
    pub fn rocksdb_backup_engine_info_timestamp(info: *const rocksdb_backup_engine_info_t,
                                                index: c_int) -> int64_t;
    pub fn rocksdb_backup_engine_info_backup_id(info: *const rocksdb_backup_engine_info_t,
                                                index: c_int) -> uint32_t;
    pub fn rocksdb_backup_engine_info_size(info: *const rocksdb_backup_engine_info_t,
                                           index: c_int) -> uint64_t;
    pub fn rocksdb_backup_engine_info_number_files(info: *const rocksdb_backup_engine_info_t,
                                                   index: c_int) -> uint32_t;
    pub fn rocksdb_backup_engine_info_destroy(info: *const rocksdb_backup_engine_info_t);
    pub fn rocksdb_backup_engine_close(be: *mut rocksdb_backup_engine_t);
    pub fn rocksdb_open_column_families(options: *const rocksdb_options_t,
                                        name: *const c_char,
                                        num_column_families: c_int,
                                        column_family_names: *const *const c_char,
                                        column_family_options: *const *mut rocksdb_options_t,
                                        column_family_handles: *mut *mut rocksdb_column_family_handle_t,
                                        errptr: *mut *mut c_char) -> *mut rocksdb_t;
    pub fn rocksdb_open_for_read_only_column_families(options: *const rocksdb_options_t,
                                                      name: *const c_char,
                                                      num_column_families: c_int,
                                                      column_family_names: *const *const c_char,
                                                      column_family_options: *const *mut rocksdb_options_t,
                                                      column_family_handles: *mut *mut rocksdb_column_family_handle_t,
                                                      error_if_log_file_exist: c_uchar,
                                                      errptr: *mut *mut c_char) -> *mut rocksdb_t;
    pub fn rocksdb_list_column_families(options: *const rocksdb_options_t,
                                        name: *const c_char,
                                        lencf: *mut size_t,
                                        errptr: *mut *mut c_char) -> *mut *mut c_char;
    pub fn rocksdb_list_column_families_destroy(list: *mut *mut c_char,
                                                len: size_t);
    pub fn rocksdb_create_column_family(db: *mut rocksdb_t,
                                        column_family_options: *const rocksdb_options_t,
                                        column_family_name: *const c_char,
                                        errptr: *mut *mut c_char) -> *mut rocksdb_column_family_handle_t;
    pub fn rocksdb_drop_column_family(db: *mut rocksdb_t,
                                      handle: *mut rocksdb_column_family_handle_t,
                                      errptr: *mut *mut c_char);
    pub fn rocksdb_column_family_handle_destroy(arg1: *mut rocksdb_column_family_handle_t);
    pub fn rocksdb_close(db: *mut rocksdb_t);
    pub fn rocksdb_put(db: *mut rocksdb_t,
                       options: *const rocksdb_writeoptions_t,
                       key: *const c_char, keylen: size_t,
                       val: *const c_char, vallen: size_t,
                       errptr: *mut *mut c_char);
    pub fn rocksdb_put_cf(db: *mut rocksdb_t,
                          options: *const rocksdb_writeoptions_t,
                          column_family: *mut rocksdb_column_family_handle_t,
                          key: *const c_char, keylen: size_t,
                          val: *const c_char, vallen: size_t,
                          errptr: *mut *mut c_char);
    pub fn rocksdb_delete(db: *mut rocksdb_t,
                          options: *const rocksdb_writeoptions_t,
                          key: *const c_char, keylen: size_t,
                          errptr: *mut *mut c_char);
    pub fn rocksdb_delete_cf(db: *mut rocksdb_t,
                             options: *const rocksdb_writeoptions_t,
                             column_family: *mut rocksdb_column_family_handle_t,
                             key: *const c_char, keylen: size_t,
                             errptr: *mut *mut c_char);
    pub fn rocksdb_merge(db: *mut rocksdb_t,
                         options: *const rocksdb_writeoptions_t,
                         key: *const c_char, keylen: size_t,
                         val: *const c_char, vallen: size_t,
                         errptr: *mut *mut c_char);
    pub fn rocksdb_merge_cf(db: *mut rocksdb_t,
                            options: *const rocksdb_writeoptions_t,
                            column_family: *mut rocksdb_column_family_handle_t,
                            key: *const c_char, keylen: size_t,
                            val: *const c_char, vallen: size_t,
                            errptr: *mut *mut c_char);
    pub fn rocksdb_write(db: *mut rocksdb_t,
                         options: *const rocksdb_writeoptions_t,
                         batch: *mut rocksdb_writebatch_t,
                         errptr: *mut *mut c_char);
    pub fn rocksdb_get(db: *mut rocksdb_t,
                       options: *const rocksdb_readoptions_t,
                       key: *const c_char, keylen: size_t,
                       vallen: *mut size_t, errptr: *mut *mut c_char) -> *mut c_char;
    pub fn rocksdb_get_cf(db: *mut rocksdb_t,
                          options: *const rocksdb_readoptions_t,
                          column_family: *mut rocksdb_column_family_handle_t,
                          key: *const c_char, keylen: size_t,
                          vallen: *mut size_t,
                          errptr: *mut *mut c_char) -> *mut c_char;
    pub fn rocksdb_multi_get(db: *mut rocksdb_t,
                             options: *const rocksdb_readoptions_t,
                             num_keys: size_t,
                             keys_list: *const *const c_char,
                             keys_list_sizes: *const size_t,
                             values_list: *mut *mut c_char,
                             values_list_sizes: *mut size_t,
                             errs: *mut *mut c_char);
    pub fn rocksdb_multi_get_cf(db: *mut rocksdb_t,
                                options: *const rocksdb_readoptions_t,
                                column_families: *const *const rocksdb_column_family_handle_t,
                                num_keys: size_t,
                                keys_list: *const *const c_char,
                                keys_list_sizes: *const size_t,
                                values_list: *mut *mut c_char,
                                values_list_sizes: *mut size_t,
                                errs: *mut *mut c_char);
    pub fn rocksdb_create_iterator(db: *mut rocksdb_t,
                                   options: *const rocksdb_readoptions_t) -> *mut rocksdb_iterator_t;
    pub fn rocksdb_create_iterator_cf(db: *mut rocksdb_t,
                                      options: *const rocksdb_readoptions_t,
                                      column_family: *mut rocksdb_column_family_handle_t) -> *mut rocksdb_iterator_t;
    pub fn rocksdb_create_snapshot(db: *mut rocksdb_t) -> *const rocksdb_snapshot_t;
    pub fn rocksdb_release_snapshot(db: *mut rocksdb_t,
                                    snapshot: *const rocksdb_snapshot_t);
    pub fn rocksdb_property_value(db: *mut rocksdb_t,
                                  propname: *const c_char) -> *mut c_char;
    pub fn rocksdb_property_value_cf(db: *mut rocksdb_t,
                                     column_family: *mut rocksdb_column_family_handle_t,
                                     propname: *const c_char) -> *mut c_char;
    pub fn rocksdb_approximate_sizes(db: *mut rocksdb_t,
                                     num_ranges: c_int,
                                     range_start_key: *const *const c_char,
                                     range_start_key_len: *const size_t,
                                     range_limit_key: *const *const c_char,
                                     range_limit_key_len: *const size_t,
                                     sizes: *mut uint64_t);
    pub fn rocksdb_approximate_sizes_cf(db: *mut rocksdb_t,
                                        column_family: *mut rocksdb_column_family_handle_t,
                                        num_ranges: c_int,
                                        range_start_key: *const *const c_char,
                                        range_start_key_len: *const size_t,
                                        range_limit_key: *const *const c_char,
                                        range_limit_key_len: *const size_t,
                                        sizes: *mut uint64_t);
    pub fn rocksdb_compact_range(db: *mut rocksdb_t,
                                 start_key: *const c_char,
                                 start_key_len: size_t,
                                 limit_key: *const c_char,
                                 limit_key_len: size_t);
    pub fn rocksdb_compact_range_cf(db: *mut rocksdb_t,
                                    column_family: *mut rocksdb_column_family_handle_t,
                                    start_key: *const c_char,
                                    start_key_len: size_t,
                                    limit_key: *const c_char,
                                    limit_key_len: size_t);
    pub fn rocksdb_delete_file(db: *mut rocksdb_t,
                               name: *const c_char);
    pub fn rocksdb_livefiles(db: *mut rocksdb_t) -> *const rocksdb_livefiles_t;
    pub fn rocksdb_flush(db: *mut rocksdb_t,
                         options: *const rocksdb_flushoptions_t,
                         errptr: *mut *mut c_char);
    pub fn rocksdb_disable_file_deletions(db: *mut rocksdb_t,
                                          errptr: *mut *mut c_char);
    pub fn rocksdb_enable_file_deletions(db: *mut rocksdb_t,
                                         force: c_uchar,
                                         errptr: *mut *mut c_char);
    pub fn rocksdb_destroy_db(options: *const rocksdb_options_t,
                              name: *const c_char,
                              errptr: *mut *mut c_char);
    pub fn rocksdb_repair_db(options: *const rocksdb_options_t,
                             name: *const c_char,
                             errptr: *mut *mut c_char);
    pub fn rocksdb_iter_destroy(arg1: *mut rocksdb_iterator_t);
    pub fn rocksdb_iter_valid(arg1: *const rocksdb_iterator_t) -> c_uchar;
    pub fn rocksdb_iter_seek_to_first(arg1: *mut rocksdb_iterator_t);
    pub fn rocksdb_iter_seek_to_last(arg1: *mut rocksdb_iterator_t);
    pub fn rocksdb_iter_seek(arg1: *mut rocksdb_iterator_t,
                             k: *const c_char, klen: size_t);
    pub fn rocksdb_iter_next(arg1: *mut rocksdb_iterator_t);
    pub fn rocksdb_iter_prev(arg1: *mut rocksdb_iterator_t);
    pub fn rocksdb_iter_key(arg1: *const rocksdb_iterator_t,
                            klen: *mut size_t) -> *const c_char;
    pub fn rocksdb_iter_value(arg1: *const rocksdb_iterator_t,
                              vlen: *mut size_t) -> *const c_char;
    pub fn rocksdb_iter_get_error(arg1: *const rocksdb_iterator_t,
                                  errptr: *mut *mut c_char);
    pub fn rocksdb_writebatch_create() -> *mut rocksdb_writebatch_t;
    pub fn rocksdb_writebatch_create_from(rep: *const c_char,
                                          size: size_t) -> *mut rocksdb_writebatch_t;
    pub fn rocksdb_writebatch_destroy(arg1: *mut rocksdb_writebatch_t);
    pub fn rocksdb_writebatch_clear(arg1: *mut rocksdb_writebatch_t);
    pub fn rocksdb_writebatch_count(arg1: *mut rocksdb_writebatch_t) -> c_int;
    pub fn rocksdb_writebatch_put(arg1: *mut rocksdb_writebatch_t,
                                  key: *const c_char, klen: size_t,
                                  val: *const c_char, vlen: size_t);
    pub fn rocksdb_writebatch_put_cf(arg1: *mut rocksdb_writebatch_t,
                                     column_family: *mut rocksdb_column_family_handle_t,
                                     key: *const c_char, klen: size_t,
                                     val: *const c_char, vlen: size_t);
    pub fn rocksdb_writebatch_putv(b: *mut rocksdb_writebatch_t,
                                   num_keys: c_int,
                                   keys_list: *const *const c_char,
                                   keys_list_sizes: *const size_t,
                                   num_values: c_int,
                                   values_list: *const *const c_char,
                                   values_list_sizes: *const size_t);
    pub fn rocksdb_writebatch_putv_cf(b: *mut rocksdb_writebatch_t,
                                      column_family: *mut rocksdb_column_family_handle_t,
                                      num_keys: c_int,
                                      keys_list: *const *const c_char,
                                      keys_list_sizes: *const size_t,
                                      num_values: c_int,
                                      values_list: *const *const c_char,
                                      values_list_sizes: *const size_t);
    pub fn rocksdb_writebatch_merge(arg1: *mut rocksdb_writebatch_t,
                                    key: *const c_char, klen: size_t,
                                    val: *const c_char, vlen: size_t);
    pub fn rocksdb_writebatch_merge_cf(arg1: *mut rocksdb_writebatch_t,
                                       column_family: *mut rocksdb_column_family_handle_t,
                                       key: *const c_char,
                                       klen: size_t,
                                       val: *const c_char,
                                       vlen: size_t);
    pub fn rocksdb_writebatch_mergev(b: *mut rocksdb_writebatch_t,
                                     num_keys: c_int,
                                     keys_list: *const *const c_char,
                                     keys_list_sizes: *const size_t,
                                     num_values: c_int,
                                     values_list: *const *const c_char,
                                     values_list_sizes: *const size_t);
    pub fn rocksdb_writebatch_mergev_cf(b: *mut rocksdb_writebatch_t,
                                        column_family: *mut rocksdb_column_family_handle_t,
                                        num_keys: c_int,
                                        keys_list: *const *const c_char,
                                        keys_list_sizes: *const size_t,
                                        num_values: c_int,
                                        values_list: *const *const c_char,
                                        values_list_sizes: *const size_t);
    pub fn rocksdb_writebatch_delete(arg1: *mut rocksdb_writebatch_t,
                                     key: *const c_char, klen: size_t);
    pub fn rocksdb_writebatch_delete_cf(arg1: *mut rocksdb_writebatch_t,
                                        column_family: *mut rocksdb_column_family_handle_t,
                                        key: *const c_char,
                                        klen: size_t);
    pub fn rocksdb_writebatch_deletev(b: *mut rocksdb_writebatch_t,
                                      num_keys: c_int,
                                      keys_list: *const *const c_char,
                                      keys_list_sizes: *const size_t);
    pub fn rocksdb_writebatch_deletev_cf(b: *mut rocksdb_writebatch_t,
                                         column_family: *mut rocksdb_column_family_handle_t,
                                         num_keys: c_int,
                                         keys_list: *const *const c_char,
                                         keys_list_sizes: *const size_t);
    pub fn rocksdb_writebatch_put_log_data(arg1: *mut rocksdb_writebatch_t,
                                           blob: *const c_char,
                                           len: size_t);
    pub fn rocksdb_writebatch_iterate(arg1: *mut rocksdb_writebatch_t,
                                      state: *mut c_void,
                                      put: ::std::option::Option<extern "C" fn(arg1: *mut c_void,
                                                                              k: *const c_char,
                                                                              klen: size_t,
                                                                              v: *const c_char,
                                                                              vlen: size_t)
                                                                    -> ()>,
                                      deleted: ::std::option::Option<extern "C" fn(arg1: *mut c_void,
                                                                              k: *const c_char,
                                                                              klen: size_t)
                                                                    -> ()>);
    pub fn rocksdb_writebatch_data(arg1: *mut rocksdb_writebatch_t,
                                   size: *mut size_t) -> *const c_char;
    pub fn rocksdb_block_based_options_create() -> *mut rocksdb_block_based_table_options_t;
    pub fn rocksdb_block_based_options_destroy(options: *mut rocksdb_block_based_table_options_t);
    pub fn rocksdb_block_based_options_set_block_size(options: *mut rocksdb_block_based_table_options_t,
                                                      block_size: size_t);
    pub fn rocksdb_block_based_options_set_block_size_deviation(options: *mut rocksdb_block_based_table_options_t,
                                                                block_size_deviation: c_int);
    pub fn rocksdb_block_based_options_set_block_restart_interval(options: *mut rocksdb_block_based_table_options_t,
                                                                  block_restart_interval: c_int);
    pub fn rocksdb_block_based_options_set_filter_policy(options: *mut rocksdb_block_based_table_options_t,
                                                         filter_policy: *mut rocksdb_filterpolicy_t);
    pub fn rocksdb_block_based_options_set_no_block_cache(options: *mut rocksdb_block_based_table_options_t,
                                                          no_block_cache: c_uchar);
    pub fn rocksdb_block_based_options_set_block_cache(options: *mut rocksdb_block_based_table_options_t,
                                                       block_cache: *mut rocksdb_cache_t);
    pub fn rocksdb_block_based_options_set_block_cache_compressed(options: *mut rocksdb_block_based_table_options_t,
                                                                  block_cache_compressed: *mut rocksdb_cache_t);
    pub fn rocksdb_block_based_options_set_whole_key_filtering(arg1: *mut rocksdb_block_based_table_options_t,
                                                               arg2: c_uchar);
    pub fn rocksdb_block_based_options_set_format_version(arg1: *mut rocksdb_block_based_table_options_t,
                                                          arg2: c_int);
    pub fn rocksdb_block_based_options_set_index_type(arg1: *mut rocksdb_block_based_table_options_t,
                                                      arg2: c_int);
    pub fn rocksdb_block_based_options_set_hash_index_allow_collision(arg1: *mut rocksdb_block_based_table_options_t,
                                                                      arg2: c_uchar);
    pub fn rocksdb_block_based_options_set_cache_index_and_filter_blocks(arg1: *mut rocksdb_block_based_table_options_t,
                                                                         arg2: c_uchar);
    pub fn rocksdb_options_set_block_based_table_factory(opt: *mut rocksdb_options_t,
                                                         table_options: *mut rocksdb_block_based_table_options_t);
    pub fn rocksdb_cuckoo_options_create() -> *mut rocksdb_cuckoo_table_options_t;
    pub fn rocksdb_cuckoo_options_destroy(options: *mut rocksdb_cuckoo_table_options_t);
    pub fn rocksdb_cuckoo_options_set_hash_ratio(options: *mut rocksdb_cuckoo_table_options_t,
                                                 v: c_double);
    pub fn rocksdb_cuckoo_options_set_max_search_depth(options: *mut rocksdb_cuckoo_table_options_t,
                                                       v: uint32_t);
    pub fn rocksdb_cuckoo_options_set_cuckoo_block_size(options: *mut rocksdb_cuckoo_table_options_t,
                                                        v: uint32_t);
    pub fn rocksdb_cuckoo_options_set_identity_as_first_hash(options: *mut rocksdb_cuckoo_table_options_t,
                                                             v: c_uchar);
    pub fn rocksdb_cuckoo_options_set_use_module_hash(options: *mut rocksdb_cuckoo_table_options_t,
                                                      v: c_uchar);
    pub fn rocksdb_options_set_cuckoo_table_factory(opt: *mut rocksdb_options_t,
                                                    table_options: *mut rocksdb_cuckoo_table_options_t);
    pub fn rocksdb_options_create() -> *mut rocksdb_options_t;
    pub fn rocksdb_options_destroy(arg1: *mut rocksdb_options_t);
    pub fn rocksdb_options_increase_parallelism(opt: *mut rocksdb_options_t,
                                                total_threads: c_int);
    pub fn rocksdb_options_optimize_for_point_lookup(opt: *mut rocksdb_options_t,
                                                     block_cache_size_mb: uint64_t);
    pub fn rocksdb_options_optimize_level_style_compaction(opt: *mut rocksdb_options_t,
                                                           memtable_memory_budget: uint64_t);
    pub fn rocksdb_options_optimize_universal_style_compaction(opt: *mut rocksdb_options_t,
                                                               memtable_memory_budget: uint64_t);
    pub fn rocksdb_options_set_compaction_filter(arg1: *mut rocksdb_options_t,
                                                 arg2: *mut rocksdb_compactionfilter_t);
    pub fn rocksdb_options_set_compaction_filter_factory(arg1: *mut rocksdb_options_t,
                                                         arg2: *mut rocksdb_compactionfilterfactory_t);
    pub fn rocksdb_options_set_comparator(arg1: *mut rocksdb_options_t,
                                          arg2: *mut rocksdb_comparator_t);
    pub fn rocksdb_options_set_merge_operator(arg1: *mut rocksdb_options_t,
                                              arg2: *mut rocksdb_mergeoperator_t);
    pub fn rocksdb_options_set_uint64add_merge_operator(arg1: *mut rocksdb_options_t);
    pub fn rocksdb_options_set_compression_per_level(opt: *mut rocksdb_options_t,
                                                     level_values: *mut c_int,
                                                     num_levels: size_t);
    pub fn rocksdb_options_set_create_if_missing(arg1: *mut rocksdb_options_t,
                                                 arg2: c_uchar);
    pub fn rocksdb_options_set_create_missing_column_families(arg1: *mut rocksdb_options_t,
                                                              arg2: c_uchar);
    pub fn rocksdb_options_set_error_if_exists(arg1: *mut rocksdb_options_t,
                                               arg2: c_uchar);
    pub fn rocksdb_options_set_paranoid_checks(arg1: *mut rocksdb_options_t,
                                               arg2: c_uchar);
    pub fn rocksdb_options_set_env(arg1: *mut rocksdb_options_t,
                                   arg2: *mut rocksdb_env_t);
    pub fn rocksdb_options_set_info_log(arg1: *mut rocksdb_options_t,
                                        arg2: *mut rocksdb_logger_t);
    pub fn rocksdb_options_set_info_log_level(arg1: *mut rocksdb_options_t,
                                              arg2: c_int);
    pub fn rocksdb_options_set_write_buffer_size(arg1: *mut rocksdb_options_t,
                                                 arg2: size_t);
    pub fn rocksdb_options_set_max_open_files(arg1: *mut rocksdb_options_t,
                                              arg2: c_int);
    pub fn rocksdb_options_set_max_total_wal_size(opt: *mut rocksdb_options_t,
                                                  n: uint64_t);
    pub fn rocksdb_options_set_compression_options(arg1: *mut rocksdb_options_t,
                                                   arg2: c_int,
                                                   arg3: c_int,
                                                   arg4: c_int);
    pub fn rocksdb_options_set_prefix_extractor(arg1: *mut rocksdb_options_t,
                                                arg2: *mut rocksdb_slicetransform_t);
    pub fn rocksdb_options_set_num_levels(arg1: *mut rocksdb_options_t,
                                          arg2: c_int);
    pub fn rocksdb_options_set_level0_file_num_compaction_trigger(arg1: *mut rocksdb_options_t,
                                                                  arg2: c_int);
    pub fn rocksdb_options_set_level0_slowdown_writes_trigger(arg1: *mut rocksdb_options_t,
                                                              arg2: c_int);
    pub fn rocksdb_options_set_level0_stop_writes_trigger(arg1: *mut rocksdb_options_t,
                                                          arg2: c_int);
    pub fn rocksdb_options_set_max_mem_compaction_level(arg1: *mut rocksdb_options_t,
                                                        arg2: c_int);
    pub fn rocksdb_options_set_target_file_size_base(arg1: *mut rocksdb_options_t,
                                                     arg2: uint64_t);
    pub fn rocksdb_options_set_target_file_size_multiplier(arg1: *mut rocksdb_options_t,
                                                           arg2: c_int);
    pub fn rocksdb_options_set_max_bytes_for_level_base(arg1: *mut rocksdb_options_t,
                                                        arg2: uint64_t);
    pub fn rocksdb_options_set_max_bytes_for_level_multiplier(arg1: *mut rocksdb_options_t,
                                                              arg2: c_int);
    pub fn rocksdb_options_set_expanded_compaction_factor(arg1: *mut rocksdb_options_t,
                                                          arg2: c_int);
    pub fn rocksdb_options_set_max_grandparent_overlap_factor(arg1: *mut rocksdb_options_t,
                                                              arg2: c_int);
    pub fn rocksdb_options_set_max_bytes_for_level_multiplier_additional(arg1: *mut rocksdb_options_t,
                                                                         level_values: *mut c_int,
                                                                         num_levels: size_t);
    pub fn rocksdb_options_enable_statistics(arg1: *mut rocksdb_options_t);
    pub fn rocksdb_options_statistics_get_string(opt: *mut rocksdb_options_t) -> *mut c_char;
    pub fn rocksdb_options_set_max_write_buffer_number(arg1: *mut rocksdb_options_t,
                                                       arg2: c_int);
    pub fn rocksdb_options_set_min_write_buffer_number_to_merge(arg1: *mut rocksdb_options_t,
                                                                arg2: c_int);
    pub fn rocksdb_options_set_max_write_buffer_number_to_maintain(arg1: *mut rocksdb_options_t,
                                                                   arg2: c_int);
    pub fn rocksdb_options_set_max_background_compactions(arg1: *mut rocksdb_options_t,
                                                          arg2: c_int);
    pub fn rocksdb_options_set_max_background_flushes(arg1: *mut rocksdb_options_t,
                                                      arg2: c_int);
    pub fn rocksdb_options_set_max_log_file_size(arg1: *mut rocksdb_options_t,
                                                 arg2: size_t);
    pub fn rocksdb_options_set_log_file_time_to_roll(arg1: *mut rocksdb_options_t,
                                                     arg2: size_t);
    pub fn rocksdb_options_set_keep_log_file_num(arg1: *mut rocksdb_options_t,
                                                 arg2: size_t);
    pub fn rocksdb_options_set_soft_rate_limit(arg1: *mut rocksdb_options_t,
                                               arg2: c_double);
    pub fn rocksdb_options_set_hard_rate_limit(arg1: *mut rocksdb_options_t,
                                               arg2: c_double);
    pub fn rocksdb_options_set_rate_limit_delay_max_milliseconds(arg1: *mut rocksdb_options_t,
                                                                 arg2: c_uint);
    pub fn rocksdb_options_set_max_manifest_file_size(arg1: *mut rocksdb_options_t,
                                                      arg2: size_t);
    pub fn rocksdb_options_set_no_block_cache(arg1: *mut rocksdb_options_t,
                                              arg2: c_uchar);
    pub fn rocksdb_options_set_table_cache_numshardbits(arg1: *mut rocksdb_options_t,
                                                        arg2: c_int);
    pub fn rocksdb_options_set_table_cache_remove_scan_count_limit(arg1: *mut rocksdb_options_t,
                                                                   arg2: c_int);
    pub fn rocksdb_options_set_arena_block_size(arg1: *mut rocksdb_options_t,
                                                arg2: size_t);
    pub fn rocksdb_options_set_use_fsync(arg1: *mut rocksdb_options_t,
                                         arg2: c_int);
    pub fn rocksdb_options_set_db_log_dir(arg1: *mut rocksdb_options_t,
                                          arg2: *const c_char);
    pub fn rocksdb_options_set_wal_dir(arg1: *mut rocksdb_options_t,
                                       arg2: *const c_char);
    pub fn rocksdb_options_set_WAL_ttl_seconds(arg1: *mut rocksdb_options_t,
                                               arg2: uint64_t);
    pub fn rocksdb_options_set_WAL_size_limit_MB(arg1: *mut rocksdb_options_t,
                                                 arg2: uint64_t);
    pub fn rocksdb_options_set_manifest_preallocation_size(arg1: *mut rocksdb_options_t,
                                                           arg2: size_t);
    pub fn rocksdb_options_set_purge_redundant_kvs_while_flush(arg1: *mut rocksdb_options_t,
                                                               arg2: c_uchar);
    pub fn rocksdb_options_set_allow_os_buffer(arg1: *mut rocksdb_options_t,
                                               arg2: c_uchar);
    pub fn rocksdb_options_set_allow_mmap_reads(arg1: *mut rocksdb_options_t,
                                                arg2: c_uchar);
    pub fn rocksdb_options_set_allow_mmap_writes(arg1: *mut rocksdb_options_t,
                                                 arg2: c_uchar);
    pub fn rocksdb_options_set_is_fd_close_on_exec(arg1: *mut rocksdb_options_t,
                                                   arg2: c_uchar);
    pub fn rocksdb_options_set_skip_log_error_on_recovery(arg1: *mut rocksdb_options_t,
                                                          arg2: c_uchar);
    pub fn rocksdb_options_set_stats_dump_period_sec(arg1: *mut rocksdb_options_t,
                                                     arg2: c_uint);
    pub fn rocksdb_options_set_block_size_deviation(arg1: *mut rocksdb_options_t,
                                                    arg2: c_int);
    pub fn rocksdb_options_set_advise_random_on_open(arg1: *mut rocksdb_options_t,
                                                     arg2: c_uchar);
    pub fn rocksdb_options_set_access_hint_on_compaction_start(arg1: *mut rocksdb_options_t,
                                                               arg2: c_int);
    pub fn rocksdb_options_set_use_adaptive_mutex(arg1: *mut rocksdb_options_t,
                                                  arg2: c_uchar);
    pub fn rocksdb_options_set_bytes_per_sync(arg1: *mut rocksdb_options_t,
                                              arg2: uint64_t);
    pub fn rocksdb_options_set_verify_checksums_in_compaction(arg1: *mut rocksdb_options_t,
                                                              arg2: c_uchar);
    pub fn rocksdb_options_set_filter_deletes(arg1: *mut rocksdb_options_t,
                                              arg2: c_uchar);
    pub fn rocksdb_options_set_max_sequential_skip_in_iterations(arg1: *mut rocksdb_options_t,
                                                                 arg2: uint64_t);
    pub fn rocksdb_options_set_disable_data_sync(arg1: *mut rocksdb_options_t,
                                                 arg2: c_int);
    pub fn rocksdb_options_set_disable_auto_compactions(arg1: *mut rocksdb_options_t,
                                                        arg2: c_int);
    pub fn rocksdb_options_set_delete_obsolete_files_period_micros(arg1: *mut rocksdb_options_t,
                                                                   arg2: uint64_t);
    pub fn rocksdb_options_set_source_compaction_factor(arg1: *mut rocksdb_options_t,
                                                        arg2: c_int);
    pub fn rocksdb_options_prepare_for_bulk_load(arg1: *mut rocksdb_options_t);
    pub fn rocksdb_options_set_memtable_vector_rep(arg1: *mut rocksdb_options_t);
    pub fn rocksdb_options_set_hash_skip_list_rep(arg1: *mut rocksdb_options_t,
                                                  arg2: size_t, arg3: int32_t,
                                                  arg4: int32_t);
    pub fn rocksdb_options_set_hash_link_list_rep(arg1: *mut rocksdb_options_t,
                                                  arg2: size_t);
    pub fn rocksdb_options_set_plain_table_factory(arg1: *mut rocksdb_options_t,
                                                   arg2: uint32_t,
                                                   arg3: c_int,
                                                   arg4: c_double,
                                                   arg5: size_t);
    pub fn rocksdb_options_set_min_level_to_compress(opt: *mut rocksdb_options_t,
                                                     level: c_int);
    pub fn rocksdb_options_set_memtable_prefix_bloom_bits(arg1: *mut rocksdb_options_t,
                                                          arg2: uint32_t);
    pub fn rocksdb_options_set_memtable_prefix_bloom_probes(arg1: *mut rocksdb_options_t,
                                                            arg2: uint32_t);
    pub fn rocksdb_options_set_max_successive_merges(arg1: *mut rocksdb_options_t,
                                                     arg2: size_t);
    pub fn rocksdb_options_set_min_partial_merge_operands(arg1: *mut rocksdb_options_t,
                                                          arg2: uint32_t);
    pub fn rocksdb_options_set_bloom_locality(arg1: *mut rocksdb_options_t,
                                              arg2: uint32_t);
    pub fn rocksdb_options_set_inplace_update_support(arg1: *mut rocksdb_options_t,
                                                      arg2: c_uchar);
    pub fn rocksdb_options_set_inplace_update_num_locks(arg1: *mut rocksdb_options_t,
                                                        arg2: size_t);
    pub fn rocksdb_options_set_compression(arg1: *mut rocksdb_options_t,
                                           arg2: c_int);
    pub fn rocksdb_options_set_compaction_style(arg1: *mut rocksdb_options_t,
                                                arg2: c_int);
    pub fn rocksdb_options_set_universal_compaction_options(arg1: *mut rocksdb_options_t,
                                                            arg2: *mut rocksdb_universal_compaction_options_t);
    pub fn rocksdb_options_set_fifo_compaction_options(opt: *mut rocksdb_options_t,
                                                       fifo: *mut rocksdb_fifo_compaction_options_t);
    pub fn rocksdb_compactionfilter_create(state: *mut c_void,
                                           destructor: ::std::option::Option<extern "C" fn(arg1: *mut c_void)
                                                                         ->
                                                                             ()>,
                                           filter: ::std::option::Option<extern "C" fn(arg1: *mut c_void,
                                                                                   level: c_int,
                                                                                   key: *const c_char,
                                                                                   key_length: size_t,
                                                                                   existing_value: *const c_char,
                                                                                   value_length: size_t,
                                                                                   new_value: *mut *mut c_char,
                                                                                   new_value_length: *mut size_t,
                                                                                   value_changed: *mut c_uchar)
                                                                         ->
                                                                             c_uchar>,
                                           name: ::std::option::Option<extern "C" fn(arg1: *mut c_void)
                                                                         ->
                                                                             *const c_char>) -> *mut rocksdb_compactionfilter_t;
    pub fn rocksdb_compactionfilter_destroy(arg1: *mut rocksdb_compactionfilter_t);
    pub fn rocksdb_compactionfiltercontext_is_full_compaction(context: *mut rocksdb_compactionfiltercontext_t) -> c_uchar;
    pub fn rocksdb_compactionfiltercontext_is_manual_compaction(context: *mut rocksdb_compactionfiltercontext_t) -> c_uchar;
    pub fn rocksdb_compactionfilterfactory_create(state: *mut c_void,
                                                  destructor: ::std::option::Option<extern "C" fn(arg1: *mut c_void)
                                                                                ->
                                                                                    ()>,
                                                  create_compaction_filter: ::std::option::Option<extern "C" fn(arg1: *mut c_void,
                                                                                          context: *mut rocksdb_compactionfiltercontext_t)
                                                                                ->
                                                                                    *mut rocksdb_compactionfilter_t>,
                                                  name: ::std::option::Option<extern "C" fn(arg1: *mut c_void)
                                                                                ->
                                                                                    *const c_char>) -> *mut rocksdb_compactionfilterfactory_t;
    pub fn rocksdb_compactionfilterfactory_destroy(arg1: *mut rocksdb_compactionfilterfactory_t);
    pub fn rocksdb_comparator_create(state: *mut c_void,
                                     destructor: ::std::option::Option<extern "C" fn(arg1: *mut c_void)
                                                                   -> ()>,
                                     compare: ::std::option::Option<extern "C" fn(arg1: *mut c_void,
                                                                             a: *const c_char,
                                                                             alen: size_t,
                                                                             b: *const c_char,
                                                                             blen: size_t)
                                                                   ->
                                                                       c_int>,
                                     name: ::std::option::Option<extern "C" fn(arg1: *mut c_void)
                                                                   ->
                                                                       *const c_char>) -> *mut rocksdb_comparator_t;
    pub fn rocksdb_comparator_destroy(arg1: *mut rocksdb_comparator_t);
    pub fn rocksdb_filterpolicy_create(state: *mut c_void,
                                       destructor: ::std::option::Option<extern "C" fn(arg1: *mut c_void)
                                                                     -> ()>,
                                       create_filter: ::std::option::Option<extern "C" fn(arg1: *mut c_void,
                                                                               key_array: *const *const c_char,
                                                                               key_length_array: *const size_t,
                                                                               num_keys: c_int,
                                                                               filter_length: *mut size_t)
                                                                     ->
                                                                         *mut c_char>,
                                       key_may_match: ::std::option::Option<extern "C" fn(arg1: *mut c_void,
                                                                               key: *const c_char,
                                                                               length: size_t,
                                                                               filter: *const c_char,
                                                                               filter_length: size_t)
                                                                     ->
                                                                         c_uchar>,
                                       delete_filter: ::std::option::Option<extern "C" fn(arg1: *mut c_void,
                                                                               filter: *const c_char,
                                                                               filter_length: size_t)
                                                                     -> ()>,
                                       name: ::std::option::Option<extern "C" fn(arg1: *mut c_void)
                                                                     ->
                                                                         *const c_char>) -> *mut rocksdb_filterpolicy_t;
    pub fn rocksdb_filterpolicy_destroy(arg1: *mut rocksdb_filterpolicy_t);
    pub fn rocksdb_filterpolicy_create_bloom(bits_per_key: c_int) -> *mut rocksdb_filterpolicy_t;
    pub fn rocksdb_mergeoperator_create(state: *mut c_void,
                                        destructor: ::std::option::Option<extern "C" fn(arg1: *mut c_void)
                                                                      -> ()>,
                                        full_merge: ::std::option::Option<extern "C" fn(arg1: *mut c_void,
                                                                                key: *const c_char,
                                                                                key_length: size_t,
                                                                                existing_value: *const c_char,
                                                                                existing_value_length: size_t,
                                                                                operands_list: *const *const c_char,
                                                                                operands_list_length: *const size_t,
                                                                                num_operands: c_int,
                                                                                success: *mut c_uchar,
                                                                                new_value_length: *mut size_t)
                                                                      ->
                                                                          *mut c_char>,
                                        partial_merge: ::std::option::Option<extern "C" fn(arg1: *mut c_void,
                                                                                key: *const c_char,
                                                                                key_length: size_t,
                                                                                operands_list: *const *const c_char,
                                                                                operands_list_length: *const size_t,
                                                                                num_operands: c_int,
                                                                                success: *mut c_uchar,
                                                                                new_value_length: *mut size_t)
                                                                      ->
                                                                          *mut c_char>,
                                        delete_value: ::std::option::Option<extern "C" fn(arg1: *mut c_void,
                                                                                value: *const c_char,
                                                                                value_length: size_t)
                                                                      -> ()>,
                                        name: ::std::option::Option<extern "C" fn(arg1: *mut c_void)
                                                                      ->
                                                                          *const c_char>) -> *mut rocksdb_mergeoperator_t;
    pub fn rocksdb_mergeoperator_destroy(arg1: *mut rocksdb_mergeoperator_t);
    pub fn rocksdb_readoptions_create() -> *mut rocksdb_readoptions_t;
    pub fn rocksdb_readoptions_destroy(arg1: *mut rocksdb_readoptions_t);
    pub fn rocksdb_readoptions_set_verify_checksums(arg1: *mut rocksdb_readoptions_t,
                                                    arg2: c_uchar);
    pub fn rocksdb_readoptions_set_fill_cache(arg1: *mut rocksdb_readoptions_t,
                                              arg2: c_uchar);
    pub fn rocksdb_readoptions_set_snapshot(arg1: *mut rocksdb_readoptions_t,
                                            arg2: *const rocksdb_snapshot_t);
    pub fn rocksdb_readoptions_set_iterate_upper_bound(arg1: *mut rocksdb_readoptions_t,
                                                       key: *const c_char,
                                                       keylen: size_t);
    pub fn rocksdb_readoptions_set_read_tier(arg1: *mut rocksdb_readoptions_t,
                                             arg2: c_int);
    pub fn rocksdb_readoptions_set_tailing(arg1: *mut rocksdb_readoptions_t,
                                           arg2: c_uchar);
    pub fn rocksdb_writeoptions_create() -> *mut rocksdb_writeoptions_t;
    pub fn rocksdb_writeoptions_destroy(arg1: *mut rocksdb_writeoptions_t);
    pub fn rocksdb_writeoptions_set_sync(arg1: *mut rocksdb_writeoptions_t,
                                         arg2: c_uchar);
    pub fn rocksdb_writeoptions_disable_WAL(opt: *mut rocksdb_writeoptions_t,
                                            disable: c_int);
    pub fn rocksdb_flushoptions_create() -> *mut rocksdb_flushoptions_t;
    pub fn rocksdb_flushoptions_destroy(arg1: *mut rocksdb_flushoptions_t);
    pub fn rocksdb_flushoptions_set_wait(arg1: *mut rocksdb_flushoptions_t,
                                         arg2: c_uchar);
    pub fn rocksdb_cache_create_lru(capacity: size_t) -> *mut rocksdb_cache_t;
    pub fn rocksdb_cache_destroy(cache: *mut rocksdb_cache_t);
    pub fn rocksdb_create_default_env() -> *mut rocksdb_env_t;
    pub fn rocksdb_env_set_background_threads(env: *mut rocksdb_env_t,
                                              n: c_int);
    pub fn rocksdb_env_set_high_priority_background_threads(env: *mut rocksdb_env_t,
                                                            n: c_int);
    pub fn rocksdb_env_join_all_threads(env: *mut rocksdb_env_t);
    pub fn rocksdb_env_destroy(arg1: *mut rocksdb_env_t);
    pub fn rocksdb_slicetransform_create(state: *mut c_void,
                                         destructor: ::std::option::Option<extern "C" fn(arg1: *mut c_void)
                                                                       -> ()>,
                                         transform: ::std::option::Option<extern "C" fn(arg1: *mut c_void,
                                                                                 key: *const c_char,
                                                                                 length: size_t,
                                                                                 dst_length: *mut size_t)
                                                                       ->
                                                                           *mut c_char>,
                                         in_domain: ::std::option::Option<extern "C" fn(arg1: *mut c_void,
                                                                                 key: *const c_char,
                                                                                 length: size_t)
                                                                       ->
                                                                           c_uchar>,
                                         in_range: ::std::option::Option<extern "C" fn(arg1: *mut c_void,
                                                                                 key: *const c_char,
                                                                                 length: size_t)
                                                                       ->
                                                                           c_uchar>,
                                         name: ::std::option::Option<extern "C" fn(arg1: *mut c_void)
                                                                       ->
                                                                           *const c_char>) -> *mut rocksdb_slicetransform_t;
    pub fn rocksdb_slicetransform_create_fixed_prefix(arg1: size_t) -> *mut rocksdb_slicetransform_t;
    pub fn rocksdb_slicetransform_create_noop() -> *mut rocksdb_slicetransform_t;
    pub fn rocksdb_slicetransform_destroy(arg1: *mut rocksdb_slicetransform_t);
    pub fn rocksdb_universal_compaction_options_create() -> *mut rocksdb_universal_compaction_options_t;
    pub fn rocksdb_universal_compaction_options_set_size_ratio(arg1: *mut rocksdb_universal_compaction_options_t,
                                                               arg2: c_int);
    pub fn rocksdb_universal_compaction_options_set_min_merge_width(arg1: *mut rocksdb_universal_compaction_options_t,
                                                                    arg2: c_int);
    pub fn rocksdb_universal_compaction_options_set_max_merge_width(arg1: *mut rocksdb_universal_compaction_options_t,
                                                                    arg2: c_int);
    pub fn rocksdb_universal_compaction_options_set_max_size_amplification_percent(arg1: *mut rocksdb_universal_compaction_options_t,
                                                                                   arg2: c_int);
    pub fn rocksdb_universal_compaction_options_set_compression_size_percent(arg1: *mut rocksdb_universal_compaction_options_t,
                                                                             arg2: c_int);
    pub fn rocksdb_universal_compaction_options_set_stop_style(arg1: *mut rocksdb_universal_compaction_options_t,
                                                               arg2: c_int);
    pub fn rocksdb_universal_compaction_options_destroy(arg1: *mut rocksdb_universal_compaction_options_t);
    pub fn rocksdb_fifo_compaction_options_create() -> *mut rocksdb_fifo_compaction_options_t;
    pub fn rocksdb_fifo_compaction_options_set_max_table_files_size(fifo_opts: *mut rocksdb_fifo_compaction_options_t,
                                                                    size: uint64_t);
    pub fn rocksdb_fifo_compaction_options_destroy(fifo_opts: *mut rocksdb_fifo_compaction_options_t);
    pub fn rocksdb_livefiles_count(arg1: *const rocksdb_livefiles_t) -> c_int;
    pub fn rocksdb_livefiles_name(arg1: *const rocksdb_livefiles_t,
                                  index: c_int) -> *const c_char;
    pub fn rocksdb_livefiles_level(arg1: *const rocksdb_livefiles_t,
                                   index: c_int) -> c_int;
    pub fn rocksdb_livefiles_size(arg1: *const rocksdb_livefiles_t,
                                  index: c_int) -> size_t;
    pub fn rocksdb_livefiles_smallestkey(arg1: *const rocksdb_livefiles_t,
                                         index: c_int,
                                         size: *mut size_t) -> *const c_char;
    pub fn rocksdb_livefiles_largestkey(arg1: *const rocksdb_livefiles_t,
                                        index: c_int,
                                        size: *mut size_t) -> *const c_char;
    pub fn rocksdb_livefiles_destroy(arg1: *const rocksdb_livefiles_t);
    pub fn rocksdb_get_options_from_string(base_options: *const rocksdb_options_t,
                                           opts_str: *const c_char,
                                           new_options: *mut rocksdb_options_t,
                                           errptr: *mut *mut c_char);
    pub fn rocksdb_free(ptr: *mut c_void);
}
